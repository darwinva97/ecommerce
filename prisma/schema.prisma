// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    Owner
    Admin
    Client
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    role UserRole @default(Client)
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ProductCategory {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    parent      String @db.ObjectId
    image       String
    description String
    slug        String

    productIDs String[]  @db.ObjectId
    products   Product[] @relation(fields: [productIDs], references: [id])

    @@unique([name])
}

model ProductLabel {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    name  String
    color String
    slug  String

    productIDs String[]  @db.ObjectId
    products   Product[] @relation(fields: [productIDs], references: [id])

    @@unique([name])
}

model ProductVariant {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    name        String
    description String

    stock         Int
    price         Float
    offer_message String

    product   Product @relation(fields: [productId], references: [id])
    productId String  @db.ObjectId
}

model Product {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    name        String
    slug        String
    description String

    variants ProductVariant[]

    categoryIDs String[]          @db.ObjectId
    categories  ProductCategory[] @relation(fields: [categoryIDs], references: [id])

    labelIDs String[]       @db.ObjectId
    labels   ProductLabel[] @relation(fields: [labelIDs], references: [id])

    @@unique([name])
}
